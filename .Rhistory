geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='')
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Number of Unique Colours of Socks vs Number of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
#This script is for bioinformatics challenge 40
#load libraries
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggpubr)
library(reshape2)
library(ggbeeswarm)
#sink Rscript to text file log
# sink('sessioninfo.txt')
# date()
# sessionInfo()
#set random seed and limit standard form
set.seed(82)
options(scipen=999)
#define function to sort socks
sort_socks <- function(socks) {
#convert to character with context because integers mean nothing for socks
jumble <- data.frame(pile = as.character(socks)) %>%
mutate(pile = paste0('colour_', pile))
#find number of each colour
number_groups <- jumble %>%
group_by(pile) %>%
table() %>%
as.data.frame()
#rename columns for clarity
colnames(number_groups) <- c('colour', 'number_socks')
#calculate number of pairs and spares
number_groups %<>% mutate(num_pairs = floor(number_socks/2)) %>%
mutate(num_spares = number_socks - (2*num_pairs))
#return this data frame of information
return(number_groups)
}
## part 1 - Sorting
#determine number of pairs for following pile:
pile = c("3", "3", "1", "2", "3", "2", "1", "3", "2", "3", "1", "3", "3", "1", "3", "1", "1", "2", "2", "2")
part1 <- sort_socks(pile)
# print total number of pairs
print(paste0('Total number of pairs in this pile is: ', sum(part1$num_pairs)))
## part 2 -  Simulation
#Assume that you have an infinite pool of n different colours of socks.
#1. Produce a random pile of 20 socks if n = 3 .
#2. Repeat this 100 times
#3. Determine the number of pairs of each pile
#Repeat the above with different numbers of colours in your pool between n = 3 and
#n = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
# function to simulate sock piles
simulate_socks <- function(total_num_socks, number_unique_colours) {
# define number of colours as a list
socks <- seq(1,number_unique_colours, 1) %>%
as.character()
# sample with replacement the available colours with equal probability of each colour
jumble <- data.frame(pile = sample(socks, total_num_socks, replace=TRUE,
prob=rep(1/number_unique_colours, number_unique_colours))) %>%
mutate(pile = paste0('colour_', pile))
sorted_socks <- sort_socks(jumble$pile)
return(sorted_socks)
}
### 1. Produce a random pile of 20 socks if n = 3 .
random_pile<- simulate_socks(total_num_socks = 20, number_unique_colours=3)
print(random_pile)
### 2. Repeat this 100 times
#function to find number of pairs in a sample
return_number_pairs <- function(total_socks, number_colours) {
num_pairs <- sum(simulate_socks(total_num_socks=total_socks, number_unique_colours=number_colours)$num_pairs)
return(num_pairs)
}
#define empty dataframe of results
results <- data.frame(total_socks = NA,
number_colours = NA,
number_pairs = NA)
# shamefully basic 'for' loop to run simulations
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = 3,
number_pairs = return_number_pairs(total_socks=20, number_colours=3))
results <- rbind(results, new_results)
}
#remove NA
results %<>% filter(!is.na(number_pairs))
### 3. Determine the number of pairs of each pile
table(results$number_pairs)
### 4. Repeat the above with different numbers of colours in your pool between n = 3 andn = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
#another shameful loop within a shameful loop - no need to run n=3 again
for(num_cols in seq(6,18,3)) {
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = num_cols,
number_pairs = return_number_pairs(total_socks=20, number_colours=num_cols))
results <- rbind(results, new_results)
}
}
## part 3 - Visualisation
#Create a plot to visualise the how the number of pairs varies as the pool of different colours
#increases using results from Part 2.
# make colour a group/character rather than an integer
results %<>% mutate(colour_group = paste0(number_colours, '_cols'))
ggplot(results, aes(x=colour_group, y=number_pairs)) +
geom_quasirandom() +
geom_violin() +
theme_pubclean()
options(scipen=1)
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
options(scipen=999)
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE, aes(label = ..r.label..)) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
#This script is for bioinformatics challenge 40
#load libraries
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggpubr)
library(reshape2)
library(ggbeeswarm)
#sink Rscript to text file log
# sink('sessioninfo.txt')
# date()
# sessionInfo()
#set random seed and limit standard form
set.seed(82)
options(scipen=999)
#define function to sort socks
sort_socks <- function(socks) {
#convert to character with context because integers mean nothing for socks
jumble <- data.frame(pile = as.character(socks)) %>%
mutate(pile = paste0('colour_', pile))
#find number of each colour
number_groups <- jumble %>%
group_by(pile) %>%
table() %>%
as.data.frame()
#rename columns for clarity
colnames(number_groups) <- c('colour', 'number_socks')
#calculate number of pairs and spares
number_groups %<>% mutate(num_pairs = floor(number_socks/2)) %>%
mutate(num_spares = number_socks - (2*num_pairs))
#return this data frame of information
return(number_groups)
}
## part 1 - Sorting
#determine number of pairs for following pile:
pile = c("3", "3", "1", "2", "3", "2", "1", "3", "2", "3", "1", "3", "3", "1", "3", "1", "1", "2", "2", "2")
part1 <- sort_socks(pile)
# print total number of pairs
print(paste0('Total number of pairs in this pile is: ', sum(part1$num_pairs)))
## part 2 -  Simulation
#Assume that you have an infinite pool of n different colours of socks.
#1. Produce a random pile of 20 socks if n = 3 .
#2. Repeat this 100 times
#3. Determine the number of pairs of each pile
#Repeat the above with different numbers of colours in your pool between n = 3 and
#n = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
# function to simulate sock piles
simulate_socks <- function(total_num_socks, number_unique_colours) {
# define number of colours as a list
socks <- seq(1,number_unique_colours, 1) %>%
as.character()
# sample with replacement the available colours with equal probability of each colour
jumble <- data.frame(pile = sample(socks, total_num_socks, replace=TRUE,
prob=rep(1/number_unique_colours, number_unique_colours))) %>%
mutate(pile = paste0('colour_', pile))
sorted_socks <- sort_socks(jumble$pile)
return(sorted_socks)
}
### 1. Produce a random pile of 20 socks if n = 3 .
random_pile<- simulate_socks(total_num_socks = 20, number_unique_colours=3)
print(random_pile)
### 2. Repeat this 100 times
#function to find number of pairs in a sample
return_number_pairs <- function(total_socks, number_colours) {
num_pairs <- sum(simulate_socks(total_num_socks=total_socks, number_unique_colours=number_colours)$num_pairs)
return(num_pairs)
}
#define empty dataframe of results
results <- data.frame(total_socks = NA,
number_colours = NA,
number_pairs = NA)
# shamefully basic 'for' loop to run simulations
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = 3,
number_pairs = return_number_pairs(total_socks=20, number_colours=3))
results <- rbind(results, new_results)
}
#remove NA
results %<>% filter(!is.na(number_pairs))
### 3. Determine the number of pairs of each pile
table(results$number_pairs)
### 4. Repeat the above with different numbers of colours in your pool between n = 3 andn = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
#another shameful loop within a shameful loop - no need to run n=3 again
for(num_cols in seq(6,18,3)) {
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = num_cols,
number_pairs = return_number_pairs(total_socks=20, number_colours=num_cols))
results <- rbind(results, new_results)
}
}
## part 3 - Visualisation
#Create a plot to visualise the how the number of pairs varies as the pool of different colours
#increases using results from Part 2.
# make colour a group/character rather than an integer
results %<>% mutate(colour_group = paste0(number_colours, '_cols'))
ggplot(results, aes(x=colour_group, y=number_pairs)) +
geom_quasirandom() +
geom_violin() +
theme_pubclean()
options(scipen=1)
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE, aes(label = ..r.label..)) +
stat_cor(method = "spearman", label.x = 5, label.y = 4) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 4, aes(label = ..r.label..)) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 5, aes(label = ..r.label..)) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
ggplot(results, aes(x=number_pairs)) + geom_density()
ggplot(results, aes(x=number_pairs)) + geom_density(aes(fill=colour_group))
ggplot(results, aes(x=number_pairs)) +
geom_density(aes(fill=colour_group, alpha=0.4))
ggplot(results, aes(x=number_pairs)) +
geom_density(aes(fill=colour_group, alpha=0.3))
ggplot(results, aes(x=number_pairs)) +
geom_density(aes(fill=colour_group, alpha=0.3)) +
theme_pubclean()
ggplot(results, aes(x=number_pairs)) +
geom_density(alpha=0.3, aes(fill=colour_group)) +
theme_pubclean()
unique(results$colour_group)
#change colour group into a leveled factor
results$colour_group <- factor(results$colour_group,
levels =c('3_cols', '6_cols', '9_cols', '12_cols', '15_cols', '18_cols'))
#produce density plots
ggplot(results, aes(x=number_pairs)) +
geom_density(alpha=0.3, aes(fill=colour_group)) +
theme_pubclean()
#produce density plots
ggplot(results, aes(x=number_pairs)) +
geom_density(alpha=0.3, aes(fill=colour_group)) +
theme_pubclean() +
theme(legend.position='right')
#produce a dot plot
dot_plot <- ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 5, aes(label = ..r.label..)) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
#produce density plots
density_plot <- ggplot(results, aes(x=number_pairs)) +
geom_density(alpha=0.3, aes(fill=colour_group)) +
theme_pubclean() +
labs(x='Number of Pairs',
y='Density',
title='Distribution of Number of pairs by colour group')
plot_grid(dot_plot, density_plot, labels=c('A','B'), scale=0.9)
library(caret)
colnames(results)
#train linear model
model <- lm(num_cols ~ number_pairs, data = results)
#train linear model
model <- lm(number_colours ~ number_pairs, data = results)
summary(model)$coef
predict(30)
model %>% predict(30)
model %>% predict(number_colours=30)
newdata <- data.frame(number_colours = seq(0,30))
model %>% predict(newdata)
#train a linear model
model <- lm(number_pairs ~ number_colours, data = results)
summary(model)$coef
newdata <- data.frame(number_colours = seq(0,30))
model %>% predict(newdata)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
return_number_pairs(total_socks=20, number_colours=30)
model %>% predict(newdata)
prediction_results <- model %>% predict(newdata)
prediction_results <- model %>% predict(newdata) %>% as.data.frame()
View(prediction_results)
#This script is for bioinformatics challenge 40
#load libraries
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggpubr)
library(reshape2)
library(ggbeeswarm)
library(caret)
#sink Rscript to text file log
# sink('sessioninfo.txt')
# date()
# sessionInfo()
#set random seed and limit standard form
set.seed(82)
options(scipen=999)
#define function to sort socks
sort_socks <- function(socks) {
#convert to character with context because integers mean nothing for socks
jumble <- data.frame(pile = as.character(socks)) %>%
mutate(pile = paste0('colour_', pile))
#find number of each colour
number_groups <- jumble %>%
group_by(pile) %>%
table() %>%
as.data.frame()
#rename columns for clarity
colnames(number_groups) <- c('colour', 'number_socks')
#calculate number of pairs and spares
number_groups %<>% mutate(num_pairs = floor(number_socks/2)) %>%
mutate(num_spares = number_socks - (2*num_pairs))
#return this data frame of information
return(number_groups)
}
## part 1 - Sorting
#determine number of pairs for following pile:
pile = c("3", "3", "1", "2", "3", "2", "1", "3", "2", "3", "1", "3", "3", "1", "3", "1", "1", "2", "2", "2")
part1 <- sort_socks(pile)
# print total number of pairs
print(paste0('Total number of pairs in this pile is: ', sum(part1$num_pairs)))
## part 2 -  Simulation
#Assume that you have an infinite pool of n different colours of socks.
#1. Produce a random pile of 20 socks if n = 3 .
#2. Repeat this 100 times
#3. Determine the number of pairs of each pile
#Repeat the above with different numbers of colours in your pool between n = 3 and
#n = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
# function to simulate sock piles
simulate_socks <- function(total_num_socks, number_unique_colours) {
# define number of colours as a list
socks <- seq(1,number_unique_colours, 1) %>%
as.character()
# sample with replacement the available colours with equal probability of each colour
jumble <- data.frame(pile = sample(socks, total_num_socks, replace=TRUE,
prob=rep(1/number_unique_colours, number_unique_colours))) %>%
mutate(pile = paste0('colour_', pile))
sorted_socks <- sort_socks(jumble$pile)
return(sorted_socks)
}
### 1. Produce a random pile of 20 socks if n = 3 .
random_pile<- simulate_socks(total_num_socks = 20, number_unique_colours=3)
print(random_pile)
### 2. Repeat this 100 times
#function to find number of pairs in a sample
return_number_pairs <- function(total_socks, number_colours) {
num_pairs <- sum(simulate_socks(total_num_socks=total_socks, number_unique_colours=number_colours)$num_pairs)
return(num_pairs)
}
#define empty dataframe of results
results <- data.frame(total_socks = NA,
number_colours = NA,
number_pairs = NA)
# shamefully basic 'for' loop to run simulations
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = 3,
number_pairs = return_number_pairs(total_socks=20, number_colours=3))
results <- rbind(results, new_results)
}
#remove NA
results %<>% filter(!is.na(number_pairs))
### 3. Determine the number of pairs of each pile
table(results$number_pairs)
### 4. Repeat the above with different numbers of colours in your pool between n = 3 andn = 18 with step size of 3 i.e. n = 3, 6, 9, 12, 15, 18 .
#another shameful loop within a shameful loop - no need to run n=3 again
for(num_cols in seq(6,18,3)) {
for (i in seq(1,100)) {
new_results <- data.frame(total_socks = 20,
number_colours = num_cols,
number_pairs = return_number_pairs(total_socks=20, number_colours=num_cols))
results <- rbind(results, new_results)
}
}
## part 3 - Visualisation
#Create a plot to visualise the how the number of pairs varies as the pool of different colours
#increases using results from Part 2.
# make colour a group/character rather than an integer
results %<>% mutate(colour_group = paste0(number_colours, '_cols'))
#change colour group into a leveled factor
results$colour_group <- factor(results$colour_group,
levels =c('3_cols', '6_cols', '9_cols', '12_cols', '15_cols', '18_cols'))
#produce a dot plot
dot_plot <- ggplot(results, aes(x=number_colours, y=number_pairs)) +
geom_point(position=position_jitter(w=0.5, h=0)) +
theme_pubclean() +
geom_smooth(method='lm', col='black', se=FALSE) +
stat_cor(method = "spearman", label.x = 5, label.y = 5, aes(label = ..r.label..)) +
labs(x='Number of Unique Colours',
y='Number of Pairs in Simulation',
title='Num of Unique Colours vs\n Num of Pairs in Simulated Sock Data') +
theme(plot.title=element_text(hjust=0.5))
#produce density plots
density_plot <- ggplot(results, aes(x=number_pairs)) +
geom_density(alpha=0.3, aes(fill=colour_group)) +
theme_pubclean() +
labs(x='Number of Pairs',
y='Density',
title='Distribution of Number of pairs by colour group')
theme(legend.position='right')
#plot both
plot_grid(dot_plot, density_plot, labels=c('A','B'), scale=0.9)
## part 4
#Is there a relationship between the number of colours to select from and the average
#number of pairs?
#yes
# Perform a statistical test to examine this.
#see spearmans rho value on plot
# Given these results train a statistical model and estimate how many pairs there will be
# when n = 30 (any type of model or machine learning algorithm). Is this answer accurate?
#train a linear model
model <- lm(number_pairs ~ number_colours, data = results)
summary(model)$coef
newdata <- data.frame(number_colours = seq(0,30))
prediction_results <- model %>% predict(newdata) %>% as.data.frame()
#model predicts 30 colours would return 3.552286 pairs
#of course you can't predict a non-integer
#dangerous to predict datapoints beyond what we have observed
#plot both
plot_grid(dot_plot, density_plot, labels=c('A','B'), scale=0.9)
View(part1)
View(part1)
View(random_pile)
